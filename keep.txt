class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None


class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def is_empty(self):
        return self.head is None

    def insert_at_beginning(self, data):
        new_node = Node(data)
        if self.is_empty():
            self.head = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node

    def insert_at_end(self, data):
        new_node = Node(data)
        if self.is_empty():
            self.head = new_node
        else:
            current = self.head
            while current.next is not None:
                current = current.next
            current.next = new_node
            new_node.prev = current

    def insert_at_position(self, data, position):
        if position <= 0:
            self.insert_at_beginning(data)
        else:
            new_node = Node(data)
            current = self.head
            count = 1
            while current.next is not None and count < position:
                current = current.next
                count += 1

            if current.next is None and count == position - 1:
                # Insert at the end
                current.next = new_node
                new_node.prev = current
            elif count == position:
                # Insert in the middle
                new_node.next = current
                new_node.prev = current.prev
                current.prev.next = new_node
                current.prev = new_node
            else:
                print("Position out of range.")

    def remove_from_head(self):
        if self.is_empty():
            print("Doubly linked list is empty.")
        elif self.head.next is None:
            # Only one node in the list
            self.head = None
        else:
            self.head = self.head.next
            self.head.prev = None

    def remove_from_tail(self):
        if self.is_empty():
            print("Doubly linked list is empty.")
        elif self.head.next is None:
            # Only one node in the list
            self.head = None
        else:
            current = self.head
            while current.next is not None:
                current = current.next
            current.prev.next = None

    def search(self, data):
        if self.is_empty():
            print("Doubly linked list is empty.")
            return None

        current = self.head
        while current is not None:
            if current.data == data:
                return current
            current = current.next

        print("Element not found.")
        return None

    def display(self):
        if self.is_empty():
            print("Doubly linked list is empty.")
        else:
            current = self.head
            while current is not None:
                print(current.data, end=" ")
                current = current.next
            print()


# Example usage:
dll = DoublyLinkedList()
dll.insert_at_beginning(3)
dll.insert_at_beginning(2)
dll.insert_at_beginning(1)
dll.insert_at_end(4)
dll.insert_at_position(5, 2)  # Insert 5 at position 2
dll.display()  # Output: 1 5 2 3 4

dll.remove_from_head()  # Remove from head
dll.display()  # Output: 5 2 3 4

dll.remove_from_tail()  # Remove from tail
dll.display()  # Output: 5 2 3
